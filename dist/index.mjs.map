{"version":3,"sources":["../src/preprocess.ts"],"names":[],"mappings":";AAYO,SAAS,gBAAA,CAAiB,IAAA,EAAc,IAAA,EAAc,SAAA,EAAoC;AAC/F,EAAA,MAAM,IAAI,IAAA,CAAK,GAAA,CAAI,SAAA,GAAY,IAAA,EAAM,YAAY,IAAI,CAAA;AACrD,EAAA,MAAM,IAAA,GAAO,IAAA,CAAK,KAAA,CAAM,IAAA,GAAO,CAAC,CAAA;AAChC,EAAA,MAAM,IAAA,GAAO,IAAA,CAAK,KAAA,CAAM,IAAA,GAAO,CAAC,CAAA;AAChC,EAAA,MAAM,EAAA,GAAK,IAAA,CAAK,KAAA,CAAA,CAAO,SAAA,GAAY,QAAQ,CAAC,CAAA;AAC5C,EAAA,MAAM,EAAA,GAAK,IAAA,CAAK,KAAA,CAAA,CAAO,SAAA,GAAY,QAAQ,CAAC,CAAA;AAC5C,EAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,CAAA,EAAG,EAAA,EAAI,EAAA,EAAI,OAAA,EAAS,EAAE,KAAA,EAAO,IAAA,EAAM,MAAA,EAAQ,IAAA,EAAK,EAAE;AAC/E;AAMO,SAAS,iBACd,CAAA,EACA,CAAA,EACA,MACA,IAAA,EACA,CAAA,EACA,aAAa,KAAA,EACa;AAC1B,EAAA,MAAM,EAAA,GAAK,UAAA,GAAa,CAAA,GAAI,CAAA,CAAE,SAAA,GAAY,CAAA;AAC1C,EAAA,MAAM,EAAA,GAAK,UAAA,GAAa,CAAA,GAAI,CAAA,CAAE,SAAA,GAAY,CAAA;AAC1C,EAAA,MAAM,EAAA,GAAK,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,IAAA,CAAK,GAAA,CAAI,IAAA,EAAA,CAAO,EAAA,GAAK,CAAA,CAAE,EAAA,IAAM,CAAA,CAAE,KAAK,CAAC,CAAA;AAC5D,EAAA,MAAM,EAAA,GAAK,IAAA,CAAK,GAAA,CAAI,CAAA,EAAG,IAAA,CAAK,GAAA,CAAI,IAAA,EAAA,CAAO,EAAA,GAAK,CAAA,CAAE,EAAA,IAAM,CAAA,CAAE,KAAK,CAAC,CAAA;AAC5D,EAAA,OAAO,EAAE,CAAA,EAAG,EAAA,EAAI,CAAA,EAAG,EAAA,EAAG;AACxB","file":"index.mjs","sourcesContent":["export interface LetterboxParams {\n  inputSize: number; // model square input (e.g., 256/384/640)\n  scale: number; // scale applied to src -> resized\n  dx: number; // left padding in pixels in model input space\n  dy: number; // top padding in pixels in model input space\n  resized: { width: number; height: number };\n}\n\n/**\n * Compute centered letterbox to fit src into a square inputSize.\n * Returns scale and padding for accurate coordinate unprojection.\n */\nexport function computeLetterbox(srcW: number, srcH: number, inputSize: number): LetterboxParams {\n  const s = Math.min(inputSize / srcW, inputSize / srcH);\n  const newW = Math.round(srcW * s);\n  const newH = Math.round(srcH * s);\n  const dx = Math.floor((inputSize - newW) / 2);\n  const dy = Math.floor((inputSize - newH) / 2);\n  return { inputSize, scale: s, dx, dy, resized: { width: newW, height: newH } };\n}\n\n/**\n * Map point from model input space back to original source pixel space.\n * If model outputs normalized coords [0..1], set normalized=true.\n */\nexport function mapFromLetterbox(\n  x: number,\n  y: number,\n  srcW: number,\n  srcH: number,\n  p: LetterboxParams,\n  normalized = false\n): { x: number; y: number } {\n  const px = normalized ? x * p.inputSize : x;\n  const py = normalized ? y * p.inputSize : y;\n  const ox = Math.max(0, Math.min(srcW, (px - p.dx) / p.scale));\n  const oy = Math.max(0, Math.min(srcH, (py - p.dy) / p.scale));\n  return { x: ox, y: oy };\n}\n"]}